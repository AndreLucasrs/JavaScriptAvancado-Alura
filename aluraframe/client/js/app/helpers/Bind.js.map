{"version":3,"sources":["../../app-es6/helpers/Bind.js"],"names":["ProxyFactory","Bind","model","view","props","proxy","create","update"],"mappings":";;;;;;;;;;;;;;;AAAQA,e,2BAAAA,Y;;;mBAEKC,I;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAYC,KAAZ,EAAkBC,IAAlB,EAAgC;AAAA;;AAAA,sCAANC,KAAM;AAANA,UAAM;AAAA;;AAC/B,QAAIC,QAAQL,aAAaM,MAAb,CAAoBJ,KAApB,EAA2BE,KAA3B,EAAkC;AAAA,YAAQD,KAAKI,MAAL,CAAYL,KAAZ,CAAR;AAAA,KAAlC,CAAZ;AACAC,SAAKI,MAAL,CAAYL,KAAZ;;AAEM,WAAOG,KAAP;AACN,I","file":"Bind.js","sourcesContent":["import {ProxyFactory} from '../services/ProxyFactory.js';\r\n\r\nexport class Bind {\r\n\r\n\t//REST operator ...props, esses ... é o rest operator\r\n\t//Para gerarmos um array com n parâmetros, devemos usar o REST apenas no último, outro vantajoso recurso do ECMAScript\r\n\t// primeiro parâmetro recebido pelo Bind é o model, o segundo é a view, e a partir do terceiro, \r\n\t//eles caem dentro do ...props - podendo ser diversos, como um array.\r\n\t// No nosso caso, ...props é um array com duas posições (adiciona e esvazia). \r\n\t//É isso que o create() do ProxyFactory espera receber. \r\n\t//Com a pequena adição do REST. Isto também nos permite fazer uma associação com apenas um parâmetro, \r\n\t//como no caso do texto de _mensagem, sem colocá-lo em um array.\r\n\tconstructor(model,view,...props){\r\n\t\tlet proxy = ProxyFactory.create(model, props, model =>view.update(model));\r\n\t\tview.update(model);\r\n        \t\r\n        return proxy;\t\r\n\t}\r\n}"]}