{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["NegociacaoController","_ordemAtual","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_listaNegociacoes","Bind","ListaNegociacoes","NegociacoesView","_mensagem","Mensagem","MensagemView","_service","NegociacaoService","_init","lista","then","negociacoes","forEach","adiciona","negociacao","catch","texto","erro","setInterval","importaNegociacoes","event","preventDefault","_criaNegociacao","cadastra","mensagem","_limpaFormulario","importa","coluna","inverteOrdem","ordena","a","b","apaga","esvazia","Negociacao","DateHelper","textoParaData","value","parseInt","parseFloat","focus"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["class NegociacaoController{\r\n\r\n\t//OBS para fazer o botão importar negociações funcionar, tem que rodar o server\r\n\t//entre na pasta serve e de um npm start\r\n\t//agora bastra abrir o http://localhost:3000\r\n\tconstructor(){\r\n\t\tthis._ordemAtual = '';\r\n\t\t//Se declaramos as variáveis usando o let, estas ganharam um escopo de bloco\t\r\n\t\t//estamos informando que o querySelector irá para a variável $, mas ainda manterá uma associação com document\r\n\t\tlet $ = document.querySelector.bind(document);\r\n        this._inputData = $('#data');\r\n        this._inputQuantidade =  $('#quantidade');\r\n        this._inputValor = $('#valor');\r\n        //this tem contexto dinamico, ira variar de acordo com o que esta chamando\r\n        //essa função abaixo tem escopo dinamico logo o this acontece o que ta escrito acima\r\n        //para esse this funciona de acordo com o contexto de NegociacaoController\r\n        //eu adicionei este parametro antes this, para mostrar qual é o contexto\r\n        //this._listaNegociacoes = new ListaNegociacoes(this, function(model) {\r\n\t\t//mas tem como resolver com arrow function\r\n\t\t// Isto ocorre porque a arrow function não é apenas uma maneira sucinta de escrever uma função,\r\n\t\t//ela também tem um característica peculiar: o escopo de this é léxico,\r\n\t\t//em vez de ser dinâmico como a outra função. \r\n\t\t//Isto significa que o this não mudará de acordo com o contexto\r\n        //this._listaNegociacoes = new ListaNegociacoes((model) =>\r\n        // \tthis._negociacoesView.update(model));\r\n\r\n        this._listaNegociacoes = new Bind(new ListaNegociacoes(),\r\n        \tnew NegociacoesView($(\"#negociacoesView\")),'adiciona','esvazia','ordena','inverteOrdem');\r\n\r\n        this._mensagem = new Bind(new Mensagem(),\r\n        \tnew MensagemView($(\"#mensagemView\")),'texto');\r\n\r\n        this._service = new NegociacaoService();\r\n\r\n        this._init();\r\n\r\n    }\r\n\r\n    _init(){\r\n        \r\n        this._service\r\n            .lista()\r\n            .then(negociacoes =>\r\n                negociacoes.forEach(negociacao =>\r\n                    this._listaNegociacoes.adiciona(negociacao)))\r\n            .catch(erro => this._mensagem.texto = erro);\r\n\r\n        setInterval(() => {\r\n            this.importaNegociacoes();\r\n        }, 3000);        \r\n    }\r\n\r\n\tadiciona(event){\r\n\r\n\t\t//isso cancela a atualização da pagina na hora de submeter\r\n\t\tevent.preventDefault();\r\n\r\n        let negociacao = this._criaNegociacao();\r\n\r\n       this._service\r\n            .cadastra(negociacao)\r\n            .then(mensagem => {\r\n\r\n                this._listaNegociacoes.adiciona(negociacao);\r\n                this._mensagem.texto = mensagem;\r\n                this._limpaFormulario();\r\n            })\r\n            .catch(erro => this._mensagem.texto = erro);\r\n\r\n\t}\r\n\r\n\timportaNegociacoes() {\r\n\r\n        this._service\r\n            .importa(this._listaNegociacoes.negociacoes)\r\n            .then(negociacoes => negociacoes.forEach(negociacao => {\r\n\r\n                this._listaNegociacoes.adiciona(negociacao);\r\n                this._mensagem.texto = 'Negociações do período importadas';\r\n            }))\r\n            .catch(erro => this._mensagem.texto = erro);\r\n    }\r\n\r\n    ordena(coluna) {\r\n        if(this._ordemAtual == coluna) {\r\n            this._listaNegociacoes.inverteOrdem();\r\n        } else {\r\n            this._listaNegociacoes.ordena((a, b) => a[coluna] - b[coluna]);    \r\n        }\r\n        this._ordemAtual = coluna;\r\n    }\r\n\r\n\tapaga(){\r\n\r\n        this._service\r\n            .apaga()\r\n            .then(mensagem =>{\r\n                this._mensagem.texto = mensagem;\r\n                this._listaNegociacoes.esvazia();\r\n            })\r\n            .catch(erro => this._mensagem.texto = erro);\r\n\r\n\t}\r\n\r\n\t_criaNegociacao(){\r\n\t\treturn new Negociacao(\r\n            DateHelper.textoParaData(this._inputData.value),\r\n            parseInt(this._inputQuantidade.value),\r\n            parseFloat(this._inputValor.value));\r\n\t}\r\n\r\n\t//o uso do underline _ ,que dizer que esse metodo so pode ser chamado pela propria classe,\r\n\t//nesse caso NegociacaoController\r\n\t_limpaFormulario(){\r\n\r\n\t\tthis._inputData.value = '';\r\n\t\tthis._inputQuantidade.value = 1;\r\n\t\tthis._inputValor.value = 0.0;\r\n\r\n\t\tthis._inputData.focus();\r\n\t}\r\n}\r\n\r\n/*\r\nNós programaremos com o ES6 e depois, vamos compilar o código para o ES5. \r\nEste processo de downgrade recebe o nome de transcompilação e é feito com o uso de um transpiler \r\n(transcompilador). Com isto, o código da Controller consegue ter o mesmo resultado no ES 5. \r\nDesta forma, conseguimos aumentar a quantidade de navegadores que suportarão o nosso código, e assim,\r\ncom a sua compatibilidade.\r\n\r\nEncontramos vários transpilers no mercado: \r\nBabel, o TypeScript (que também atua como transcompilador). \r\nNo nosso caso, focaremos no Babel, por ser open source.\r\n\r\nO código-fonte estará escrito com o ES 6, \r\nmas o resultado da transcompilação ficará na pasta app. \r\nE será desta que iremos importar os arquivos do index.html. \r\nPorém, se tentarmos recarregar a página do formulário agora, \r\nela não funcionará porque nenhum scriptserá encontrado. \r\nVeremos como fazer a transcompilação.\r\n\r\n*/"]}