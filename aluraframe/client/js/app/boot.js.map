{"version":3,"sources":["../app-es6/boot.js"],"names":["currentInstance","negociacaoController","document","querySelector","onsubmit","adiciona","bind","onclick","apaga"],"mappings":";;;;;;;;AAAQA,qB,oCAAAA,e;;;AAGJC,0B,GAAuBD,iB;;AAC3BE,eAASC,aAAT,CAAuB,OAAvB,EAAgCC,QAAhC,GAA2CH,qBAAqBI,QAArB,CAA8BC,IAA9B,CAAmCL,oBAAnC,CAA3C;AACAC,eAASC,aAAT,CAAuB,eAAvB,EAAwCI,OAAxC,GAAkDN,qBAAqBO,KAArB,CAA2BF,IAA3B,CAAgCL,oBAAhC,CAAlD;;AAGA","file":"boot.js","sourcesContent":["import {currentInstance} from './controllers/NegociacaoController';\r\nimport {} from './polyfill/fetch';\r\n\r\nlet negociacaoController = currentInstance();\r\ndocument.querySelector('.form').onsubmit = negociacaoController.adiciona.bind(negociacaoController);\r\ndocument.querySelector('[type=button]').onclick = negociacaoController.apaga.bind(negociacaoController);\r\n\r\n\r\n/*\r\nIndicamos em System.import que boot.js será o primeiro módulo a ser carregado. Observe que não precisamos mais nos preocupar com a ordem de carregamentos de scripts, o loader vai resolver tudo para nós.\r\n\r\nES2015 e módulos\r\nApesar de fazer parte da especificação, ainda não há consenso a respeito de como os scripts devem ser carregados pelo navegador. É por isso que para usarmos o sistema de módulos oficial do JavaScript precisamos utilizar loaders de terceiros, que nada mais são do que scripts especiais que farão o carregamento dos nossos módulos. Neste treinamento, utilizaremos o SystemJs, um carregador de módulos universal que suporta módulos do ES2015.\r\n\r\nAlém do loader, ajustes em nosso código devem ser feitos para adequá-lo ao loader utilizado. Resumindo: para que possamos utilizar os módulos do ES2015, precisamos utilizar um loader e transcompilar nosso código.\r\n\r\nAntes de baixarmos nosso loader, vamos primeiro configuração Babel para que adeque nosso código ao Systemjs\r\n\r\n\r\nBabel e transcompilação de módulos\r\nHoje, temos apenas configurado o preset es2015 no arquivo .babelrc. Ele garante a compilação do nosso código para ES5. Contudo, este preset não esta preparado para transcompilar módulos para o Systemjs.\r\n\r\nRefatorando código com import e export\r\n\r\nVeja que usamos import seguido de {View}. Colocamos o nome da classe que desejamos importar de um módulo entre chaves. Em seguida, usamos a instrução from apontando para o local do módulo. Encare cada script nosso agora como um módulo, ou seja, View.js é um módulo. Contudo, do jeito que esta, não funcionará. Porque tudo que estiver entre {} deve ser exportado pelo módulo. Se abrirmos View.js em nenhum momento deixamos claro que a classe View pode ser importada. Corrigimos isso facilmente adicionando a instrução export antes da definição da classe\r\n*/"]}