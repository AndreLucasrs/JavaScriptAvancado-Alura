{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService {\r\n\r\n\tconstructor(){\r\n\r\n\t\tthis._http = new HttpService();\r\n\t}\r\n\r\n\tobterNegociacoesDaSemana(){\r\n\r\n\t\treturn this._http\r\n\t\t\t.get(\"negociacoes/semana\")\r\n\t\t\t.then(negociacoes => negociacoes.map(objeto => new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)))\r\n\t\t\t.catch(erro => {\r\n\t\t\t\tconsole.log(erro);\r\n\t\t\t\tthrow new Error(\"Não foi possivel obter as negociações da semana\");\r\n\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t//o xhr.responseText é um texto\r\n\t\t\t//JSON.parse vai retornar o texto do response.text em objeto\r\n\t\t\t//.map para cada objeto dentro dessa lista eu converto ele para uma instancia de Negociacao\r\n\t\t\t//isso no final vai gerar um novo array\r\n\t\t\t// nesse novo array eu percorro cada item e adiciona em listaNegociacoes\r\n\t\t\t//sobre o .map() http://desenvolvimentoparaweb.com/javascript/map-filter-reduce-javascript/\r\n\t}\r\n\r\n\tobterNegociacoesDaSemanaAnterior(){\r\n\r\n\t\treturn this._http\r\n\t\t\t.get(\"negociacoes/anterior\")\r\n\t\t\t.then(negociacoes => negociacoes.map(objeto => new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)))\r\n\t\t\t.catch(erro => {\r\n\t\t\t\tconsole.log(erro);\r\n\t\t\t\tthrow new Error(\"Não foi possivel obter as negociações da semana anterior\");\r\n\t\t\t});\r\n\t}\r\n\r\n\tobterNegociacoesDaSemanaRetrasada(){\r\n\r\n\t\treturn this._http\r\n\t\t\t.get(\"negociacoes/retrasada\")\r\n\t\t\t.then(negociacoes => negociacoes.map(objeto => new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)))\r\n\t\t\t.catch(erro => {\r\n\t\t\t\tconsole.log(erro);\r\n\t\t\t\tthrow new Error(\"Não foi possivel obter as negociações da semana retrasada\");\r\n\t\t\t});\r\n\t}\r\n\r\n\tobterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    } \r\n    //sobre o .reduce() http://desenvolvimentoparaweb.com/javascript/map-filter-reduce-javascript/\r\n\r\n    cadastra(negociacao){\r\n\r\n    \treturn ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociação adicionada com sucesso')\r\n            .catch(erro => {\r\n            \tconsole.log(erro);\r\n            \tthrow new Error('Não foi possível adicionar a negociação');\r\n            });\r\n    }\r\n\r\n    lista(){\r\n\r\n    \treturn ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro =>{\r\n            \tconsole.log(erro);\r\n            \tthrow new Error('Não foi possível obter as negociações');\r\n            });\r\n\r\n    }\r\n\r\n    apaga(){\r\n\r\n    \treturn ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n            \tconsole.log(erro);\r\n            \tthrow new Error('Não foi possível apagar as negociações');\r\n            });\r\n    }\r\n\r\n    importa(listaAtual){\r\n\r\n    \treturn this.obterNegociacoes()\r\n\t        .then(negociacoes => \r\n\t            negociacoes.filter(negociacao => \r\n\t                !listaAtual.some(negociacaoExistente => \r\n\t                    negociacao.isEquals(negociacaoExistente)))\r\n\t        \t)\r\n\t        \t.catch(erro => {\r\n\r\n\t        \t\tconsole.log(erro);\r\n\t        \t\tthrow new Error('Não foi possivel importar as negociações');\r\n\t        \t}); \r\n\r\n\r\n        //filter ele ira filtar pela listaNegociacoes e em nogaciacoes ele ira usar o some() pra ve se existe ja negociacao\r\n        //porque se a gente não usasse isso ele ira comprar 2 objetos que podem ter o mesmo valor mas tem instancias diferentes\r\n        //A função some() vai varrer cada item da lista verificando se os elementos são iguais ao critério estabelecido\r\n\r\n\r\n        /*\r\n        Estamos fazendo o filtro que varrerá todos os elementos. \r\n        O primeiro array que será testado (this._listaNegociacoes) \r\n        verificará se cada item já existente é igual a negociação filtrada. \r\n        Caso seja equivalente, o some() retornará \"verdadeiro\"\r\n        e o item entrará no filtro de negociações. \r\n        Como nosso objetivo é que o some() retorne \"verdadeiro\", \r\n        caso ele siga até o final do array sem encontrar um elemento igual ao filtro, \r\n        usaremos o sinal de exclamação (!). Com isto, no próximo encadeamento da função then(), \r\n        teremos as negociações que não existem dentro de _listaNegociacoes.negociacoes.\r\n        */\r\n    }\r\n}"]}