{"version":3,"sources":["../../app-es6/view/NegociacoesView.js"],"names":["NegociacoesView","elemento","model","negociacoes","map","DateHelper","dataParaTexto","n","data","quantidade","valor","volume","join","volumeTotal","View"],"mappings":";;;;;;;;;;IAAMA,e;;;AAEL,2BAAYC,QAAZ,EAAqB;AAAA;;AAAA,6HAEdA,QAFc;AAGpB;;;;6BAEQC,K,EAAM;AACd;AACA;AACA;AACA;AACA;AACA,2mBAYaA,MAAMC,WAAN,CAAkBC,GAAlB,CAAsB;AAAA,8EAIfC,WAAWC,aAAX,CAAyBC,EAAEC,IAA3B,CAJe,2CAKfD,EAAEE,UALa,2CAMfF,EAAEG,KANa,2CAOfH,EAAEI,MAPa;AAAA,OAAtB,EAUAC,IAVA,CAUK,EAVL,CAZb,sKA4BgCV,MAAMW,WA5BtC;AAiCA;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;EAxD6BC,I","file":"NegociacoesView.js","sourcesContent":["class NegociacoesView extends View{\r\n\r\n\tconstructor(elemento){\r\n\r\n\t\tsuper(elemento);\r\n\t}\r\n\r\n\ttemplate(model){\r\n\t\t//usando template String\r\n\t\t//template String js, usas-se isso ` `\r\n\t\t//quando uso o join eu coloco como criterio junção uma String em branco,\r\n\t\t//ele ira varrer a lista e criar uma nova lista, mas essa nova lista so vai ter String\r\n\t\t//e no final eu dou um join, ae vai virar uma String com todos os itens do array concatenados\r\n\t\treturn `\r\n\t\t\t\t\t<table class=\"table table-hover table-bordered\">\r\n        \t\t\t\t<thead>\r\n            \t\t\t\t<tr>\r\n                \t\t\t\t<th onclick=\"negociacaoController.ordena('data')\">DATA</th>\r\n                                <th onclick=\"negociacaoController.ordena('quantidade')\">QUANTIDADE</th>\r\n                                <th onclick=\"negociacaoController.ordena('valor')\">VALOR</th>\r\n                                <th onclick=\"negociacaoController.ordena('volume')\">VOLUME</th>\r\n            \t\t\t\t</tr>\r\n        \t\t\t\t</thead>\r\n\r\n        \t\t\t\t<tbody>\r\n        \t\t\t\t\t${model.negociacoes.map(n => \r\n\r\n        \t\t\t\t\t\t`\r\n        \t\t\t\t\t\t\t<tr>\r\n        \t\t\t\t\t\t\t\t<td>${DateHelper.dataParaTexto(n.data)}</td>\r\n        \t\t\t\t\t\t\t\t<td>${n.quantidade}</td>\r\n        \t\t\t\t\t\t\t\t<td>${n.valor}</td>\r\n        \t\t\t\t\t\t\t\t<td>${n.volume}</td>\r\n        \t\t\t\t\t\t\t</tr> \r\n        \t\t\t\t\t\t`\r\n        \t\t\t\t\t).join('')}\r\n        \t\t\t\t</tbody>\r\n        \r\n        \t\t\t\t<tfoot>\r\n        \t\t\t\t\t<td colspan=\"3\"></td>\r\n    \t\t\t\t\t\t<td>\r\n                                ${model.volumeTotal}\r\n                            </td>\r\n        \t\t\t\t</tfoot>\r\n    \t\t\t\t</table>\r\n\t\t\t\t`;\r\n\t}\r\n\t//quanto temos uma arrow function, quando temos uma unica instrução não precisa-se do return e nem das {}\r\n\t//esse caso esta acontecendo no .map()\r\n\t//nesse ultimo caso de expressão estamos usando o .reduce(), serve para reduzir,\r\n\t//ela processa o array e no final retorna um unico resultado\r\n\t//aquele 0.0 no final esta falando que total inicia com 0.0\r\n\r\n\t//OBS IIEF\r\n\t//Immediately-invoked function expression (IIFE) ou a função imediata\r\n\t//Vc cria a função e ja chama\r\n\t/*(function() {\r\n\r\n            let total = 0;\r\n            model.negociacoes.forEach(n => total+= n.volume);\r\n            return total;\r\n       })()*/\r\n\r\n}"]}