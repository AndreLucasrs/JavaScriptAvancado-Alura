{"version":3,"sources":["../../app-es6/models/ListaNegociacoes.js"],"names":["ListaNegociacoes","_negociacoes","negociacao","push","criterio","sort","reverse","concat","reduce","total","n","volume"],"mappings":";;;;;;IAAMA,gB;;AAEL;AACA,gCAAc;AAAA;;AAEP,aAAKC,YAAL,GAAoB,EAApB;AACA;AACA;AACA;AACA;AACH;;;;iCAEQC,U,EAAY;;AAEjB,iBAAKD,YAAL,CAAkBE,IAAlB,CAAuBD,UAAvB;AACA;AACA;AACA;AACA;AACH;;;kCAUK;;AAEP,iBAAKD,YAAL,GAAmB,EAAnB;AACA;AACA;AACD;;;+BAMSG,Q,EAAU;AACb,iBAAKH,YAAL,CAAkBI,IAAlB,CAAuBD,QAAvB;AACH;;;uCAEc;AACX,iBAAKH,YAAL,CAAkBK,OAAlB;AACH;;;4BAzBc;AACjB;AACA;AACA;AACA;AACG,mBAAO,GAAGC,MAAH,CAAU,KAAKN,YAAf,CAAP;AACH;;;4BASoB;AACf,mBAAO,KAAKA,YAAL,CAAkBO,MAAlB,CAAyB,UAACC,KAAD,EAAQC,CAAR;AAAA,uBAAcD,QAAQC,EAAEC,MAAxB;AAAA,aAAzB,EAAyD,GAAzD,CAAP;AACF","file":"ListaNegociacoes.js","sourcesContent":["class ListaNegociacoes {\r\n\r\n\t//constructor(contexto, armadilha) {\r\n\tconstructor() {\t\r\n\r\n        this._negociacoes = [];\r\n        //isso ira fazer a tela se atualizar sempre, pq o parametro passado é uma função anonima de update\r\n        //essa armadilha sempre sera chamado no adiciona ou no esvazia\r\n        //this._armadilha = armadilha;\r\n        //this._contexto = contexto;\r\n    }\r\n\r\n    adiciona(negociacao) {\r\n\r\n        this._negociacoes.push(negociacao);\r\n        //o model é a instancia de listaNegociacoes esta passando quando esta sendo chamada\r\n        //esse this dentro da armadilha esta recebendo a propria estancia de quem esta chamando-a\r\n        //this._armadilha(this);\r\n        //Reflect.apply(this._armadilha,this._contexto,[this]);\r\n    }\r\n\r\n\tget negociacoes() {\r\n\t\t//dessa forma abaixo, que desse um get negociacao.push, conseguia adicionar um novo valor, e não apenas pegalo\r\n\t\t//return this._negociacoes;\r\n\t\t//isso estar retornando a copia do array, se vc der um push agora, vc estara inserindo valores\r\n\t\t//na copia da lista, e não na lista original\r\n    \treturn [].concat(this._negociacoes);\r\n\t}\r\n\r\n\tesvazia(){\r\n\r\n\t\t this._negociacoes =[];\r\n\t\t //this._armadilha(this);\r\n\t\t //Reflect.apply(this._armadilha,this._contexto,[this])\r\n\t}\r\n\r\n    get volumeTotal() {\r\n       return this._negociacoes.reduce((total, n) => total + n.volume, 0.0);\r\n    }\r\n\r\n    ordena(criterio) {\r\n        this._negociacoes.sort(criterio);        \r\n    }\r\n\r\n    inverteOrdem() {\r\n        this._negociacoes.reverse();\r\n    }\r\n}"]}